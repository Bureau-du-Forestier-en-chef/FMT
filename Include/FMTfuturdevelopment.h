/*
Copyright (c) 2019 Gouvernement du Québec

SPDX-License-Identifier: LiLiQ-R-1.1
License-Filename: LICENSES/EN/LiLiQ-R11unicode.txt
*/

#ifndef FMTfuturdevelopment_H_INCLUDED
#define FMTfuturdevelopment_H_INCLUDED

#include "FMTdevelopment.h"
#include <boost/serialization/serialization.hpp>
#include <memory>
#include <boost/serialization/export.hpp>

namespace Core
{
	// DocString: FMTfuturdevelopment
	/**
	FMTfuturdevelopement is the child class of FMTdevelopement. It represent the description of a
	futur stand that does not exist in the actual forest and is generated by growth or by transition.
	*/
	class FMTEXPORT FMTfuturdevelopment : public FMTdevelopment
		{
		// DocString: FMTfuturdevelopment::serialize
		/**
		Serialize function is for serialization, used to do multiprocessing across multiple cpus (pickle in Pyhton)
		*/
		friend class boost::serialization::access;
		template<class Archive>
		void serialize(Archive& ar, const unsigned int version)
		{
			try {
			ar & boost::serialization::make_nvp("development", boost::serialization::base_object<FMTdevelopment>(*this));
			}catch (...)
			{
			_exhandler->printexceptions("", "FMTfuturdevelopment::serialize", __LINE__, __FILE__);
			}
		}
		public:
			// DocString: FMTfuturdevelopment()
			/**
			Default constructor for FMTfuturdevelopement
			*/
			FMTfuturdevelopment();
			// DocString: ~FMTfuturdevelopment()
			/**
			Default destructor for FMTfuturdevelopement.
			*/
			~FMTfuturdevelopment() = default;
			// DocString: FMTfuturdevelopment(const FMTdevelopment&)
			/**
			FMTdevelopement constructor using a FMTdevelopment.
			*/
			FMTfuturdevelopment(const FMTdevelopment& dev);
			// DocString: FMTfuturdevelopment(const FMTfuturdevelopment&)
			/**
			FMTfuturdevelopement copy constructor.
			*/
			FMTfuturdevelopment(const FMTfuturdevelopment& rhs);
			// DocString: FMTfuturdevelopment::operator==
			/**
			FMTfuturdevelopement equality operator.
			*/
			bool operator == (const FMTfuturdevelopment& rhs) const;
			// DocString: FMTfuturdevelopment::operator=
			/**
			FMTfuturdevelopement copy assignment.
			*/
			FMTfuturdevelopment& operator = (const FMTfuturdevelopment& rhs);
			// DocString: FMTfuturdevelopment::operator=
			/**
			FMTfuturdevelopement copy assignment.
			*/
			std::unique_ptr<FMTdevelopment> Clone() const override;
			// DocString: FMTfuturdevelopment::getarea
			/**
			Return the area of the futur developement 0.
			*/
			double getarea() const override;

		};
}

BOOST_CLASS_EXPORT_KEY(Core::FMTfuturdevelopment)
#endif // FMTDEV_H_INCLUDED